// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/domsu/stranger-chat/repository (interfaces: IConversationRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/domsu/stranger-chat/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockIConversationRepository is a mock of IConversationRepository interface
type MockIConversationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIConversationRepositoryMockRecorder
}

// MockIConversationRepositoryMockRecorder is the mock recorder for MockIConversationRepository
type MockIConversationRepositoryMockRecorder struct {
	mock *MockIConversationRepository
}

// NewMockIConversationRepository creates a new mock instance
func NewMockIConversationRepository(ctrl *gomock.Controller) *MockIConversationRepository {
	mock := &MockIConversationRepository{ctrl: ctrl}
	mock.recorder = &MockIConversationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConversationRepository) EXPECT() *MockIConversationRepositoryMockRecorder {
	return m.recorder
}

// CreateConversation mocks base method
func (m *MockIConversationRepository) CreateConversation(arg0, arg1 uuid.UUID) *model.Conversation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConversation", arg0, arg1)
	ret0, _ := ret[0].(*model.Conversation)
	return ret0
}

// CreateConversation indicates an expected call of CreateConversation
func (mr *MockIConversationRepositoryMockRecorder) CreateConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversation", reflect.TypeOf((*MockIConversationRepository)(nil).CreateConversation), arg0, arg1)
}

// GetConversationForUser mocks base method
func (m *MockIConversationRepository) GetConversationForUser(arg0 uuid.UUID) *model.Conversation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationForUser", arg0)
	ret0, _ := ret[0].(*model.Conversation)
	return ret0
}

// GetConversationForUser indicates an expected call of GetConversationForUser
func (mr *MockIConversationRepositoryMockRecorder) GetConversationForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationForUser", reflect.TypeOf((*MockIConversationRepository)(nil).GetConversationForUser), arg0)
}

// GetConversations mocks base method
func (m *MockIConversationRepository) GetConversations() []*model.Conversation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversations")
	ret0, _ := ret[0].([]*model.Conversation)
	return ret0
}

// GetConversations indicates an expected call of GetConversations
func (mr *MockIConversationRepositoryMockRecorder) GetConversations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversations", reflect.TypeOf((*MockIConversationRepository)(nil).GetConversations))
}

// RemoveConversation mocks base method
func (m *MockIConversationRepository) RemoveConversation(arg0 uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveConversation", arg0)
}

// RemoveConversation indicates an expected call of RemoveConversation
func (mr *MockIConversationRepositoryMockRecorder) RemoveConversation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConversation", reflect.TypeOf((*MockIConversationRepository)(nil).RemoveConversation), arg0)
}
